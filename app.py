# üì¶ Manipula√ß√£o de Dados
import pandas as pd
import numpy as np

# üìà Visualiza√ß√£o
import seaborn as sns
import matplotlib.pyplot as plt
import plotly.express as px
import plotly.io as pio

# üß† Machine Learning
import xgboost as xgb
from xgboost import XGBClassifier
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import (
    classification_report, confusion_matrix, roc_auc_score,
    accuracy_score, recall_score, mean_absolute_error,
    mean_squared_error, r2_score
)

# üñ•Ô∏è Interface Web
import streamlit as st

# ‚öôÔ∏è Outros
import os
import joblib
import pickle

# Configura√ß√µes da p√°gina
st.set_page_config(
    page_title="An√°lise de Dados Diabetes",
    page_icon="ü©∫",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Carregar dados
@st.cache_data
def carregar_dados():
    url = "https://raw.githubusercontent.com/atlantico-academy/datasets/main/diabetes.csv"
    return pd.read_csv(url)

# Carregar os dados
diabetes = carregar_dados()

# Treinar e salvar os LabelEncoders, se ainda n√£o existirem
if not os.path.exists('le_gender.pkl') or not os.path.exists('le_smoking.pkl'):
    le_gender = LabelEncoder()
    le_gender.fit(diabetes['gender'])
    joblib.dump(le_gender, 'le_gender.pkl')

    le_smoking = LabelEncoder()
    le_smoking.fit(diabetes['smoking_history'])
    joblib.dump(le_smoking, 'le_smoking.pkl')

# Carregar os LabelEncoders
le_gender = joblib.load('le_gender.pkl')
le_smoking = joblib.load('le_smoking.pkl')

# Aplicar Label Encoding nos dados
diabetes['gender'] = le_gender.transform(diabetes['gender'])
diabetes['smoking_history'] = le_smoking.transform(diabetes['smoking_history'])
diabetes_numerico = diabetes.select_dtypes(include=['int64', 'float64'])

# Definir as colunas de caracter√≠sticas
feature_columns = ['gender', 'age', 'hypertension', 'heart_disease',
                   'smoking_history', 'bmi', 'HbA1c_level', 'blood_glucose_level']

# Salvar as colunas de caracter√≠sticas, se ainda n√£o existirem
if not os.path.exists('feature_columns.pkl'):
    joblib.dump(feature_columns, 'feature_columns.pkl')

# Carregar o modelo final
with open('le_gender.pkl', 'rb') as f:
    le_gender = pickle.load(f)

# T√≠tulo do aplicativo
st.title("üîé Projeto Final - Bootcamp Ci√™ncia de Dados Avanti")
st.caption("An√°lise Explorat√≥ria e Comparativa utilizando o dataset de Diabetes")

# Criar abas - AGORA COM 4 ABAS EXPL√çCITAS
tab1, tab2, tab3, tab4 = st.tabs([ 
    "üéØ Sobre o Projeto", 
    "üìö An√°lise Explorat√≥ria", 
    "üß† An√°lise Comparativa de dados",
    "üß™ Avalia√ß√£o Pessoal de Risco"
    
])

# Fun√ß√£o para gerar download de gr√°ficos
def gerar_download(fig):
    # Gerar imagem do gr√°fico
    img = pio.to_image(fig, format='png', width=800, height=600)
    st.download_button(
        label="Baixar Gr√°fico",
        data=img,
        file_name="grafico.png",
        mime="image/png"
    )

# Tab de Apresenta√ß√£o do Projeto
with tab1:
    # Cabe√ßalho com emoji
    #st.header("üîé Projeto de Previs√£o de Diabetes")
    
    # Introdu√ß√£o em container destacado
    with st.container(border=True):
        st.write("""
        ** üñ•Ô∏è  Aplicativo educativo** desenvolvido para o Bootcamp de Ci√™ncia de Dados da Avanti, 
        com objetivo de prever diabetes atrav√©s de modelos preditivos.
        """)
    
    # Divis√£o em colunas para organiza√ß√£o
    col1, col2 = st.columns(2)
    
    with col1:
        # Se√ß√£o 1: Partes do Projeto
        st.subheader("üìã Estrutura do Projeto")
        st.markdown("""
        - **üîç Parte 1:** An√°lise Explorat√≥ria de Dados
        - **üìä Parte 2:** An√°lise Comparativa de Modelos
        """)
        
        # Se√ß√£o 2: Equipe
        st.subheader("üë• Equipe")
        st.markdown("""
        - Time inicial: 6 pessoas
        - Time final: 4 colaboradores
        - Encontros semanais √†s ter√ßas, 18h
        """)
        
        # Se√ß√£o 5: Aprendizados 
        st.subheader("üîë Aprendizados Chave:")
    st.markdown("""
<div style='text-align: justify'>
<ul>
  <li><b>Dom√≠nio do Ciclo de Dados:</b> A experi√™ncia pr√°tica em an√°lise explorat√≥ria e comparativa evidenciou o impacto da prepara√ß√£o e interpreta√ß√£o de dados em decis√µes concretas, aproximando-me da atua√ß√£o profissional.</li>
  <li><b>Rigidez Metodol√≥gica:</b> A implementa√ß√£o de pipelines e valida√ß√£o cruzada consolidou a import√¢ncia da consist√™ncia e confiabilidade no processo de modelagem.</li>
  <li><b>Sele√ß√£o Estrat√©gica de M√©tricas:</b> Desenvolvi a capacidade de escolher m√©tricas adequadas para contextos sens√≠veis, como a √°rea da sa√∫de, garantindo avalia√ß√µes mais precisas e √©ticas.</li>
  <li><b>Compara√ß√£o Robusta de Modelos:</b> Aprimorei a seguran√ßa na compara√ß√£o de modelos, fundamentando as escolhas em crit√©rios t√©cnicos s√≥lidos.</li>
  <li><b>Valor da Colabora√ß√£o:</b> O trabalho em equipe demonstrou ser fundamental para a supera√ß√£o de desafios complexos.</li>
  <li><b>Narrativa dos Dados:</b> Conclu√≠ que dados possuem o poder de contar hist√≥rias significativas, e a habilidade de interpret√°-las constitui um diferencial crucial.</li>
</ul>
</div>
""", unsafe_allow_html=True)
    
    with col2:
        # Se√ß√£o 4: Metodologia
        st.subheader("üìå Metodologia CRISP-DM")
        st.markdown("""
        1. **Entendimento dos dados**  
           ‚Ü≥ Coleta + An√°lise Explorat√≥ria  
        2. **Prepara√ß√£o**  
           ‚Ü≥ Tratamento de dados faltantes  
           ‚Ü≥ Codifica√ß√£o/Normaliza√ß√£o  
        3. **Modelagem**  
           ‚Ü≥ Treinamento + Compara√ß√£o de modelos
        """)
            
    # Se√ß√£o 3: Tecnologias
    st.subheader("üõ† Tecnologias")
    st.markdown("""
        ```python
        Python (Pandas, Scikit-learn)
        Jupyter Notebook
        Streamlit
        ```
        """)
    
    # Se√ß√£o de agradecimento
    st.divider()
    st.markdown("""
    *Agrade√ßo √† [Avanti](https://atlanticoavanti.com.br) pela oportunidade e a todos os colegas que colaboraram neste projeto!*  
    *Desenvolvido por Alexsandra Tavares* üöÄ
    """)
    
    # Imagem com ajuste de largura
    st.image("imagens/tipos-de-analise-de-dados.jpg",
             caption="Exemplo de Tipos de An√°lise de Dados",
             use_container_width=True)  # Ajuste o valor conforme necessidade ou adaptar a responsividade de tela

# Tab de An√°lise Explorat√≥ria
with tab2:
    st.header("An√°lise Explorat√≥ria")
    
    # Estat√≠sticas b√°sicas
    st.subheader("Estat√≠sticas Descritivas")
    st.write(diabetes.describe())
    
    # Visualiza√ß√µes
    st.subheader("Distribui√ß√£o das Vari√°veis")
    col1, col2 = st.columns(2)
    
    with col1:
        selected_col = st.selectbox("Selecione a vari√°vel:", diabetes.columns)
        fig, ax = plt.subplots()
        sns.histplot(diabetes[selected_col], kde=True, ax=ax)
        st.pyplot(fig)
    
    with col2:
        st.subheader("Correla√ß√£o entre Vari√°veis")
        corr = diabetes_numerico.corr()
        plt.figure(figsize=(10, 8))
        sns.heatmap(corr, annot=True, cmap='coolwarm', fmt=".2f", linewidths=0.5)
        plt.title("Matriz de Correla√ß√£o entre Vari√°veis Num√©ricas")
        plt.tight_layout()
        st.pyplot(plt)

# Tab An√°lise Comparativa de dados (Modelagem e Avalia√ß√£o)    
with tab3:
    st.header("üß† Modelagem e Avalia√ß√£o")
    st.write("Utilizamos o algoritmo **XGBoost Classifier** para prever a presen√ßa de diabetes com base nas caracter√≠sticas fornecidas.")
    
    st.markdown("""
    **Principais vari√°veis utilizadas no modelo:**
    - G√™nero
    - Idade
    - Hist√≥rico de Tabagismo
    - Hipertens√£o
    - Doen√ßa Card√≠aca
    - IMC (√çndice de Massa Corporal)
    - Hemoglobina Glicada (HbA1c)
    - N√≠vel de Glicose no Sangue

    O modelo foi treinado com uma divis√£o de 80% dos dados para treino e 20% para teste, garantindo uma avalia√ß√£o justa e precisa.
    """)

    st.success("üîç Observa√ß√£o: O XGBoost demonstrou √≥timo desempenho em problemas de classifica√ß√£o tabular, como este.")

# Tab Avalia√ß√£o Pessoal de Risco
with tab4:
    st.subheader("üéØ Predi√ß√£o Personalizada de Risco de Diabetes")
    
    # Carregamentos
    modelo_final = joblib.load("modelo_final.pkl")
    feature_columns = joblib.load("feature_columns.pkl")
    le_gender = joblib.load("le_gender.pkl")
    le_smoking = joblib.load("le_smoking.pkl")

    st.title("Analisador de Risco de Diabetes")

    # Interface de entrada de dados
    st.header("Preencha os dados abaixo:")

    # Entradas do usu√°rio
    col1, col2 = st.columns(2)

with col1:
    gender = st.selectbox("G√™nero:", le_gender.classes_)
    age = st.number_input("Idade:", min_value=0, max_value=120, value=30)
    hypertension = st.selectbox("Hipertens√£o:", ["0", "1"])
    heart_disease = st.selectbox("Doen√ßa Card√≠aca:", ["0", "1"])

with col2:
    smoking_history = st.selectbox("Hist√≥rico de Tabagismo:", le_smoking.classes_)
    bmi = st.number_input("IMC:", min_value=10.0, max_value=60.0, value=25.0)
    hba1c_level = st.number_input("HbA1c (%):", min_value=3.0, max_value=15.0, value=5.5)
    blood_glucose_level = st.number_input("Glicose no sangue (mg/dL):", min_value=50, max_value=500, value=100)

        # Bot√£o de predi√ß√£o
if st.button("Analisar Risco"):
    try:
        # Transforma os dados categ√≥ricos com LabelEncoder
        gender_encoded = le_gender.transform([gender])[0]
        smoking_encoded = le_smoking.transform([smoking_history])[0]

        # Monta o DataFrame de entrada
        input_data = {
            'gender': gender_encoded,
            'age': age,
            'hypertension': int(hypertension),
            'heart_disease': int(heart_disease),
            'smoking_history': smoking_encoded,
            'bmi': bmi,
            'HbA1c_level': hba1c_level,
            'blood_glucose_level': blood_glucose_level
        }

        input_df = pd.DataFrame([input_data], columns=feature_columns)

        # Predi√ß√£o
        prediction = modelo_final.predict(input_df)[0]
        prob = modelo_final.predict_proba(input_df)[0][1]

        # Exibe resultado
        st.subheader("Resultado da An√°lise:")
        if prediction == 1:
            st.error(f"‚ö†Ô∏è Alto risco de diabetes. Probabilidade: {prob:.2%}")
        else:
            st.success(f"‚úÖ Baixo risco de diabetes. Probabilidade: {prob:.2%}")

    except Exception as e:
        st.error(f"Ocorreu um erro na an√°lise: {str(e)}")
